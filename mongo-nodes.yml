AWSTemplateFormatVersion: "2010-09-09"
Description: "Mongo Nodes"

Parameters:
  VPC:
    Type: AWS::EC2::VPC::Id
    Description: "VPC-ID of your existing Virtual Private Cloud (VPC) where you want to depoy MongoDB cluster."
  MongoDBServerSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "ID of the MongoDB Server Access Security Group (e.g., sg-7f16e910)"
  MongoDBServersSecurityGroupID:
    Type: AWS::EC2::SecurityGroup::Id
    Description: "ID of the MongoDB Inter-Server Communication Security Group (e.g., sg-7f16e910)"
  MongoDBNodeIAMProfileID:
    Type: String
    Description: ID of the MongoDB IAM Profile
  NodeSubnet:
    Type: String
    Description: Subnet Id.
  NodeInstanceType:
    Type: String
    Description: Amazon EC2 instance type for the MongoDB nodes.
    Default: m4.large
    AllowedValues:
      - m5.large
      - m5.xlarge
      - m5.2xlarge
      - m5.4xlarge
      - m5.12xlarge
      - m5.24xlarge
      - c5.large
      - c5.xlarge
      - c5.2xlarge
      - c5.4xlarge
      - c5.9xlarge
      - c5.18xlarge
      - x1.16xlarge
      - x1.32xlarge
      - r4.large
      - r4.xlarge
      - r4.2xlarge
      - r4.4xlarge
      - r4.8xlarge
      - r4.16xlarge
      - i3.large
      - i3.xlarge
      - i3.2xlarge
      - i3.4xlarge
      - i3.8xlarge
      - i3.16xlarge
      - x1e.32xlarge
      - x1e.16xlarge
      - x1e.8xlarge
      - x1e.4xlarge
      - x1e.2xlarge
      - x1e.xlarge
      - m3.medium
      - m3.large
      - m3.xlarge
      - m3.2xlarge
      - m4.large
      - m4.xlarge
      - m4.2xlarge
      - m4.4xlarge
      - m4.10xlarge
      - c3.large
      - c3.xlarge
      - c3.2xlarge
      - c3.4xlarge
      - c3.8xlarge
      - r3.large
      - r3.xlarge
      - r3.2xlarge
      - r3.4xlarge
      - r3.8xlarge
      - i2.xlarge
      - i2.2xlarge
      - i2.4xlarge
      - i2.8xlarge

  ImageId:
    Type: String
    Description: AMI ID for Instance
  ReplicaNodeNameTag:
    Type: String
    Description: Instance Name
  NodeReplicaSetIndex:
    Type: String
    Description: nstance Index
  ReplicaShardIndex:
    Type: String
    Description: Shard Index
  StackName:
    Type: String
    Description: Name of the parent stack
  VolumeSize:
    Type: String
    Description: EBS Volume Size (data) to be attached to node in GBs
    Default: 400
  VolumeType:
    Type: String
    Description: Bucket where the templates are stored.
    Default: gp2
    AllowedValues:
      - gp2
      - io1
  Iops:
    Type: String
    Description: Iops of EBS volume when io1 type is chosen. Otherwise ignored
    Default: 100
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair. MongoDB instances will launch with this KeyPair.
  ClusterReplicaSetCount:
    Type: String
    Description: Number of Replica Set Members. Choose 1 or 3
    Default: 3
    AllowedValues:
      - 1
      - 3
  MongoDBVersion:
    Type: String
    Description: MongoDB version
    Default: 4.0
    AllowedValues:
      - 4.0
      - 3.6
      - 3.4
      - 3.2
  MongoDBAdminUsername:
    Type: String
    NoEcho: true
    Description: MongoDB admin account username
    Default: admin
    MinLength: 1
    MaxLength: 16
    AllowedPattern: "[a-zA-Z][a-zA-Z0-9]*"
    ConstraintDescription: must begin with a letter and contain only alphanumeric characters.
  MongoDBAdminPassword:
    Type: String
    NoEcho: true
    Description: Enter your MongoDB Database Password, Min 8, maximum of 32 characters.
    AllowedPattern: "([A-Za-z0-9_@-]{8,32})"
    ConstraintDescription: "Input your MongoDB database password, Min 8, Maximum of 32 characters. . Allowed characters are: [A-Za-z0-9_@-]"
  ReplicaNodeWaitForNodeInstallWaitHandle:
    Type: String
    Description: Pre-signed Wait Handle URL to send signal for associated wait condition
  QSS3BucketName:
    Type: String
    Description: "S3 bucket name for the Quick Start assets. Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
    AllowedPattern: "^[0-9a-zA-Z]+([0-9a-zA-Z-]*[0-9a-zA-Z])*$"
    ConstraintDescription: "Quick Start bucket name can include numbers, lowercase letters, uppercase letters, and hyphens (-). It cannot start or end with a hyphen (-)."
  QSS3KeyPrefix:
    Type: String
    AllowedPattern: "^[0-9a-zA-Z-/]*$"
    ConstraintDescription: "Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/)."
    Description: "S3 key prefix for the Quick Start assets. Quick Start key prefix can include numbers, lowercase letters, uppercase letters, hyphens (-), and forward slash (/). It cannot start or end with a hyphen (-)."

Conditions:
  UsePIops: !Equals [!Ref VolumeType, "io1"]

Outputs:
  NodePrivateIp:
    Description: Private IP Address of Node Instance
    Value: !GetAtt [ReplicaNodeInstance, PrivateIp]
  NodeInstanceID:
    Description: Private IP Address of Node Instance
    Value: !Ref ReplicaNodeInstance
  NodeNameTag:
    Description: Private IP Address of Node Instance
    Value: !Ref ReplicaNodeNameTag

Resources:
  ReplicaNodeNetworkInterface:
    Type: AWS::EC2::NetworkInterface
    Properties:
      Description: Network Interface for Mongo Node
      SubnetId: !Ref NodeSubnet
      GroupSet:
        - !Ref MongoDBServerSecurityGroupID
        - !Ref MongoDBServersSecurityGroupID
      SourceDestCheck: true
      Tags:
        - Key: Network
          Value: Private

  ReplicaNodeInstance:
    Type: AWS::EC2::Instance
    Metadata:
      HostRole: "MongoDB Node"
      AWS::CloudFormation::Init:
        config:
          files:
            "/tmp/mongo_pass.txt":
              content: !Ref MongoDBAdminPassword
              mode: 000440
              owner: root
              group: root
    Properties:
      NetworkInterfaces:
        - NetworkInterfaceId: !Ref ReplicaNodeNetworkInterface
          DeviceIndex: 0
      KeyName: !Ref KeyName
      ImageId: !Ref ImageId
      IamInstanceProfile: !Ref MongoDBNodeIAMProfileID
      Tags:
        - Key: Name
          Value: !Ref ReplicaNodeNameTag
        - Key: ClusterReplicaSetCount
          Value: ClusterReplicaSetCount
        - Key: NodeReplicaSetIndex
          Value: !Ref NodeReplicaSetIndex
        - Key: ReplicaShardIndex
          Value: !Ref ReplicaShardIndex
      BlockDeviceMappings:
        - DeviceName: "/dev/xvdg"
          Ebs:
            VolumeType: io1
            DeleteOnTermination: true
            VolumeSize: 25
            Iops: 250
            Encrypted: true
        - DeviceName: "/dev/xvdh"
          Ebs:
            VolumeType: io1
            DeleteOnTermination: true
            VolumeSize: 25
            Iops: 200
            Encrypted: true
        - DeviceName: "/dev/xvdf"
          Ebs:
            VolumeSize: !Ref VolumeSize
            VolumeType: !Ref VolumeType
            Iops: !If
              - UsePIops
              - !Ref Iops
              - !Ref AWS::NoValue
            DeleteOnTermination: true
            Encrypted: true
      InstanceType: !Ref NodeInstanceType
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          /opt/aws/bin/cfn-init -v --stack ${AWS::StackName} --resource ReplicaNodeInstance --region ${AWS::Region}
          mkdir -p /home/ec2-user/mongodb
          cd /home/ec2-user/mongodb
          aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}/orchestrator.sh orchestrator.sh
          chmod +x orchestrator.sh
          aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}/disable-transparent-hugepages /etc/init.d/disable-transparent-hugepages
          chmod +x /etc/init.d/disable-transparent-hugepages
          chkconfig --add disable-transparent-hugepages
          aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}/init_replica.sh init.sh
          aws s3 cp s3://${QSS3BucketName}/${QSS3KeyPrefix}/signalFinalStatus.sh signalFinalStatus.sh
          chmod +x signalFinalStatus.sh
          chmod +x init.sh

          #  Run the install
          #  Store stack name to tag DDB name
          echo "export TABLE_NAMETAG=${StackName}" >> config.sh
          echo "export MongoDBVersion=${MongoDBVersion}" >> config.sh
          echo "export VPC=${VPC}" >> config.sh

          #  Store WaitHandler
          echo "export WAITHANDLER=${ReplicaNodeWaitForNodeInstallWaitHandle}" >> config.sh
          echo "export MONGODB_ADMIN_USER=${MongoDBAdminUsername}" >> config.sh
          mkdir -p /mongo_auth
          ./init.sh > install.log 2>&1

          #  Cleanup
          chown -R ec2-user:ec2-user /home/ec2-user/
          /home/ec2-user/mongodb/signalFinalStatus.sh 0

  NodeInstanceRecoveryAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmDescription: EC2 Autorecovery for Node Instance. Autorecover if we fail EC2 status checks for 5 minutes.
      Namespace: AWS/EC2
      MetricName: StatusCheckFailed_System
      Statistic: Minimum
      Period: 60
      EvaluationPeriods: 5
      ComparisonOperator: GreaterThanThreshold
      Threshold: 0
      AlarmActions: [!Sub "arn:aws:automate:${AWS::Region}:ec2:recover"]
      Dimensions:
        - Name: InstanceId
          Value: !Ref ReplicaNodeInstance
